/* SCE CONFIDENTIAL
* $PSLibId$
* Copyright (C) 2006 Sony Computer Entertainment Inc. 
* All Rights Reserved.
*/
//-----------------------------------------------------------------------------
//                             Sample Framework
//
// Win32 Input
//
// $File: //nextgendev/Framework_080/include/win32/FWWin32Input.h $
// $Author: asidwell $
// $Date: 2006/01/06 $
// $Revision: #1 $
//
// Copyright (C) 2006 Sony Computer Entertainment.
// All Rights Reserved.
//
//-----------------------------------------------------------------------------

#ifndef __FW_WIN32INPUT_H__
#define __FW_WIN32INPUT_H__

#define DIRECTINPUT_VERSION 0x0800

#include <windows.h>
#include <dinput.h>

// platform specific mouse info
class FWWin32MouseInfo
{
public:
	bool					mIsWithinClientArea;	// mouse inside client area
	LPDIRECTINPUTDEVICE8	mpDevice;				// pointer to dinput device

};

// keyboard mapping to direct input key offsets
static unsigned char sKeyboardMap[256] =
{
	DIK_A,			//Channel_Key_A,
	DIK_B,			//Channel_Key_B,
	DIK_C,			//Channel_Key_C,
	DIK_D,			//Channel_Key_D,
	DIK_E,			//Channel_Key_E,
	DIK_F,			//Channel_Key_F,
	DIK_G,			//Channel_Key_G,
	DIK_H,			//Channel_Key_H,
	DIK_I,			//Channel_Key_I,
	DIK_J,			//Channel_Key_J,
	DIK_K,			//Channel_Key_K,
	DIK_L,			//Channel_Key_L,
	DIK_M,			//Channel_Key_M,
	DIK_N,			//Channel_Key_N,
	DIK_O,			//Channel_Key_O,
	DIK_P,			//Channel_Key_P,
	DIK_Q,			//Channel_Key_Q,
	DIK_R,			//Channel_Key_R,
	DIK_S,			//Channel_Key_S,
	DIK_T,			//Channel_Key_T,
	DIK_U,			//Channel_Key_U,
	DIK_V,			//Channel_Key_V,
	DIK_W,			//Channel_Key_W,
	DIK_X,			//Channel_Key_X,
	DIK_Y,			//Channel_Key_Y,
	DIK_Z,			//Channel_Key_Z,
	DIK_1,			//Channel_Key_1,
	DIK_2,			//Channel_Key_2,
	DIK_3,			//Channel_Key_3,
	DIK_4,			//Channel_Key_4,
	DIK_5,			//Channel_Key_5,
	DIK_6,			//Channel_Key_6,
	DIK_7,			//Channel_Key_7,
	DIK_8,			//Channel_Key_8,
	DIK_9,			//Channel_Key_9,
	DIK_0,			//Channel_Key_0,
	DIK_ESCAPE,		//Channel_Key_Escape,
	DIK_F1,			//Channel_Key_F1,
	DIK_F2,			//Channel_Key_F2,
	DIK_F3,			//Channel_Key_F3,
	DIK_F4,			//Channel_Key_F4,
	DIK_F5,			//Channel_Key_F5,
	DIK_F6,			//Channel_Key_F6,
	DIK_F7,			//Channel_Key_F7,
	DIK_F8,			//Channel_Key_F8,
	DIK_F9,			//Channel_Key_F9,
	DIK_F10,		//Channel_Key_F10,
	DIK_F11,		//Channel_Key_F11,
	DIK_F12,		//Channel_Key_F12,
	DIK_RETURN,		//Channel_Key_Enter,
	DIK_BACK,		//Channel_Key_Backspace,
	DIK_TAB,		//Channel_Key_Tab,
	DIK_SPACE,		//Channel_Key_Space,
	DIK_MINUS,		//Channel_Key_Minus,
	DIK_EQUALS,		//Channel_Key_Equals,
	DIK_LBRACKET,	//Channel_Key_LeftBracket,
	DIK_RBRACKET,	//Channel_Key_RightBracket,
	DIK_BACKSLASH,	//Channel_Key_Backslash,
	DIK_SEMICOLON,	//Channel_Key_Semicolon
	DIK_APOSTROPHE,	//Channel_Key_Apostrophe
	DIK_COMMA,		//Channel_Key_Comma,
	DIK_PERIOD,		//Channel_Key_Period,
	DIK_SLASH,		//Channel_Key_Slash,
	DIK_LEFT,		//Channel_Key_Left,
	DIK_RIGHT,		//Channel_Key_Right,
	DIK_UP,			//Channel_Key_Up,
	DIK_DOWN,		//Channel_Key_Down,
	DIK_HOME,		//Channel_Key_Home,
	DIK_END,		//Channel_Key_End,
	DIK_PRIOR,		//Channel_Key_PageUp,
	DIK_NEXT,		//Channel_Key_PageDown,
	DIK_INSERT,		//Channel_Key_Insert,
	DIK_DELETE,		//Channel_Key_Delete,
	DIK_NUMPAD1,	//Channel_Key_Numpad_1,
	DIK_NUMPAD2,	//Channel_Key_Numpad_2,
	DIK_NUMPAD3,	//Channel_Key_Numpad_3,
	DIK_NUMPAD4,	//Channel_Key_Numpad_4,
	DIK_NUMPAD5,	//Channel_Key_Numpad_5,
	DIK_NUMPAD6,	//Channel_Key_Numpad_6,
	DIK_NUMPAD7,	//Channel_Key_Numpad_7,
	DIK_NUMPAD8,	//Channel_Key_Numpad_8,
	DIK_NUMPAD9,	//Channel_Key_Numpad_9,
	DIK_NUMPAD0,	//Channel_Key_Numpad_0,
	DIK_DIVIDE,		//Channel_Key_Numpad_Slash,
	DIK_MULTIPLY,	//Channel_Key_Numpad_Asterisk,
	DIK_SUBTRACT,	//Channel_Key_Numpad_Minus,
	DIK_ADD,		//Channel_Key_Numpad_Plus,
	DIK_NUMPADENTER,//Channel_Key_Numpad_Enter,
	DIK_DECIMAL,	//Channel_Key_Numpad_Period,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
	0,
};

#endif//__FW_WIN32INPUT_H__

// Local variables:
// indent-tabs-mode: t
// tab-width: 4
// End:
// vim:ts=4:sw=4
